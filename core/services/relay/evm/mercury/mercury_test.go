package mercury

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"testing"

	"github.com/pkg/errors"
	"github.com/smartcontractkit/chainlink/core/internal/testutils"
	"github.com/smartcontractkit/chainlink/core/logger"
	"github.com/smartcontractkit/libocr/offchainreporting2/types"
	ocrtypes "github.com/smartcontractkit/libocr/offchainreporting2/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

var sampleReport = ocrtypes.Report{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x63, 0x5a, 0xe2, 0xf, 0x2, 0x3, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0xf5, 0xe1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5c, 0x94, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xad, 0x70, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xd4, 0x1c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf9, 0x9c}
var sampleReportCtx = ocrtypes.ReportContext{ReportTimestamp: types.ReportTimestamp{ConfigDigest: types.ConfigDigest{0x0, 0x1, 0xa9, 0xa4, 0x7f, 0x4b, 0x90, 0x62, 0xa0, 0xe0, 0x1f, 0xd1, 0x37, 0x31, 0xfd, 0xcb, 0x67, 0xe, 0x57, 0x5c, 0xce, 0x93, 0x60, 0x9f, 0xb, 0x95, 0x2d, 0x38, 0x1c, 0xb3, 0xdc, 0x65}, Epoch: 0x1ae, Round: 0x1}, ExtraHash: [32]uint8{0xd6, 0x9f, 0x2d, 0x63, 0x99, 0x2e, 0x9b, 0x2a, 0x36, 0x7d, 0x4f, 0x4b, 0x7f, 0x54, 0xf, 0xf4, 0x4e, 0x1d, 0xa3, 0xc5, 0x1, 0xcf, 0x2d, 0x1a, 0x7f, 0x56, 0x13, 0x36, 0x52, 0xe9, 0xea, 0x9c}}
var sampleSigs = []ocrtypes.AttributedOnchainSignature{types.AttributedOnchainSignature{Signature: []uint8{0x81, 0x46, 0xc, 0x1e, 0xa2, 0xbe, 0xdc, 0x3, 0x3c, 0xd2, 0x9, 0x98, 0x73, 0x25, 0xdc, 0x34, 0x6a, 0x8e, 0x7e, 0x38, 0x7d, 0x2a, 0xbf, 0x44, 0x93, 0xad, 0xa9, 0x5a, 0xd2, 0xb8, 0xce, 0xef, 0x5b, 0xc1, 0xc3, 0xcf, 0x3c, 0xc2, 0x66, 0xda, 0x12, 0x5a, 0x59, 0x80, 0x1b, 0x7e, 0x52, 0x6b, 0x1c, 0x98, 0x1, 0x8e, 0x9a, 0x8, 0x52, 0x6, 0x7b, 0x51, 0x45, 0x5e, 0x72, 0x8e, 0x28, 0xd4, 0x1}, Signer: 0x0}, types.AttributedOnchainSignature{Signature: []uint8{0x18, 0x7d, 0x1e, 0x9d, 0xa8, 0x9a, 0xc3, 0x94, 0xb5, 0x3c, 0x83, 0xc1, 0x3f, 0x78, 0x9a, 0xe9, 0x18, 0x49, 0xac, 0xaa, 0xa9, 0x90, 0xae, 0x2e, 0xd2, 0x30, 0x76, 0xd5, 0xd3, 0xeb, 0x7f, 0x92, 0x21, 0xb2, 0x74, 0x23, 0xc8, 0x9, 0xea, 0xf3, 0xe8, 0x8e, 0x10, 0xb4, 0x45, 0xc7, 0xde, 0x4a, 0x12, 0xaf, 0xe7, 0x92, 0x60, 0xa2, 0x67, 0x89, 0xdf, 0xf7, 0x1, 0xbf, 0xb6, 0x93, 0xab, 0x31, 0x1}, Signer: 0x1}}

const expectedMercuryReport = `
{
  "ReportCtx": {
    "ConfigDigest": "0001a9a47f4b9062a0e01fd13731fdcb670e575cce93609f0b952d381cb3dc65",
    "Epoch": 430,
    "Round": 1,
    "ExtraHash": [
      214,
      159,
      45,
      99,
      153,
      46,
      155,
      42,
      54,
      125,
      79,
      75,
      127,
      84,
      15,
      244,
      78,
      29,
      163,
      197,
      1,
      207,
      45,
      26,
      127,
      86,
      19,
      54,
      82,
      233,
      234,
      156
    ]
  },
  "Report": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGNa4g8CAwEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAX14QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFyUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADUHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPmc",
  "Signatures": [
    {
      "Signature": "gUYMHqK+3AM80gmYcyXcNGqOfjh9Kr9Ek62pWtK4zu9bwcPPPMJm2hJaWYAbflJrHJgBjpoIUgZ7UUVeco4o1AE=",
      "Signer": 0
    },
    {
      "Signature": "GH0enaiaw5S1PIPBP3ia6RhJrKqpkK4u0jB21dPrf5IhsnQjyAnq8+iOELRFx95KEq/nkmCiZ4nf9wG/tpOrMQE=",
      "Signer": 1
    }
  ]
}`

func Test_MercuryTransmitter_Marshal(t *testing.T) {
	mr := MercuryReport{sampleReportCtx, sampleReport, sampleSigs}

	b, err := json.Marshal(mr)
	require.NoError(t, err)

	fmt.Printf("BALLS %s\n", b)

	assert.JSONEq(t, expectedMercuryReport, string(b))

	nmr := MercuryReport{}
	json.Unmarshal(b, &nmr)

	assert.Equal(t, mr, nmr)
}

type MockHTTPClient struct {
	do func(req *http.Request) (*http.Response, error)
}

func (m MockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	return m.do(req)
}

func Test_MercuryTransmitter_Transmit(t *testing.T) {
	lggr := logger.TestLogger(t)
	fromAccount := "foo from account"
	reportURL := "http://report.test/foo"
	username := "my username"
	password := "my password"

	t.Run("successful HTTP POST", func(t *testing.T) {
		httpClient := MockHTTPClient{
			do: func(req *http.Request) (resp *http.Response, err error) {
				assert.Equal(t, "POST", req.Method)
				buf, err := req.GetBody()
				require.NoError(t, err)
				b, err := ioutil.ReadAll(buf)
				require.NoError(t, err)
				assert.JSONEq(t, expectedMercuryReport, string(b))
				assert.Equal(t, len(b), int(req.ContentLength))
				assert.Equal(t, "report.test", req.Host)
				assert.Equal(t, "/foo", req.URL.Path)
				resp = new(http.Response)
				resp.Body = io.NopCloser(bytes.NewBuffer([]byte{}))
				resp.Status = "200 OK"
				return resp, nil
			},
		}
		mt := NewTransmitter(lggr, fromAccount, httpClient, reportURL, username, password)
		err := mt.Transmit(testutils.Context(t), sampleReportCtx, sampleReport, sampleSigs)

		require.NoError(t, err)
	})

	t.Run("failing HTTP POST", func(t *testing.T) {
		httpClient := MockHTTPClient{
			do: func(req *http.Request) (resp *http.Response, err error) {
				return nil, errors.New("foo error")
			},
		}
		mt := NewTransmitter(lggr, fromAccount, httpClient, reportURL, username, password)
		err := mt.Transmit(testutils.Context(t), sampleReportCtx, sampleReport, sampleSigs)

		require.Error(t, err)
		assert.Contains(t, err.Error(), "foo error")
	})
}
